# -*- mode: ruby -*-

##################################################
# Generated by phansible.com
##################################################

# If your Vagrant version is lower than 1.5, you can still use this provisioning script
# by commenting or removing the line below and providing the config.vm.box_url parameter,
# if it's not already defined in this Vagrantfile. Keep in mind that you won't be able
# to use the Vagrant Cloud and other newer Vagrant features.
Vagrant.require_version ">= 1.5"

# Determine whether we're on a Windows or Linux/OS X host, we use this to launch Ansible
# in the supported way for that host.
# source: https://stackoverflow.com/questions/2108727/which-in-ruby-checking-if-program-exists-in-path-from-ruby
def which(cmd)
    exts = ENV['PATHEXT'] ? ENV['PATHEXT'].split(';') : ['']
    ENV['PATH'].split(File::PATH_SEPARATOR).each do |path|
        exts.each { |ext|
            exe = File.join(path, "#{cmd}#{ext}")
            return exe if File.executable? exe
        }
    end
    return nil
end

def fail_with_message(msg)
  fail Vagrant::Errors::VagrantError.new, msg
end

Vagrant.configure("2") do |config|

    config.vm.provider :virtualbox do |v|
        v.name = "api.perna.dev"
        v.customize [
            "modifyvm", :id,
            "--name", "api.perna.dev",
            "--memory", 1024,
            "--natdnshostresolver1", "on",
            "--cpus", 1,
        ]
    end

    config.vm.box = "ubuntu/trusty64"

    config.vm.network :private_network, ip: "192.168.33.99"
    config.ssh.forward_agent = true

    # If Ansible is in your path it will provision from your HOST machine
    # If Ansible is not found in the path it will be installed in the VM and provisioned from there
    if which('ansible-playbook')
        config.vm.provision "ansible" do |ansible|
            ansible.playbook = "ansible/playbook.yml"
            ansible.inventory_path = "ansible/inventories/dev"
            ansible.limit = 'all'
            ansible.ask_vault_pass = true
        end
    else
        config.vm.provision :shell, path: "ansible/windows.sh", args: ["api.perna.dev"]
    end

    if Vagrant.has_plugin? 'vagrant-hostmanager'
      config.hostmanager.enabled = true
      config.hostmanager.manage_host = true
      config.hostmanager.aliases = ["api.perna.dev"]
    else
      fail_with_message "vagrant-hostmanager missing, please install the plugin with this command:\nvagrant plugin install vagrant-hostmanager"
    end

    config.vm.synced_folder "./../", "/vagrant", type: "nfs"
end
